{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\DEXP\\\\Desktop\\\\ReactHooks\\\\hooks-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\DEXP\\\\Desktop\\\\ReactHooks\\\\hooks-react\\\\src\\\\context\\\\github\\\\GithubState.js\";\nimport React, { useReducer } from 'react';\nimport { CLEAR_USERS, GET_REPOS, GET_USER, SEARCH_USERS, SET_LOADING } from '../types';\nimport { GithubContext } from './githubContext';\nimport { githubReducer } from './githubReducer';\nconsole.log(process.env.REACT_APP_CLIENT_SECRET);\nexport const GithubState = ({\n  children\n}) => {\n  const initialState = {\n    user: {},\n    users: [],\n    loading: false,\n    repos: []\n  };\n\n  const _useReducer = useReducer(githubReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const search = async value => {\n    setLoading(); //...\n\n    dispatch({\n      type: SEARCH_USERS,\n      payload: []\n    });\n  };\n\n  const getUser = async name => {\n    setLoading(); //...\n\n    dispatch({\n      type: GET_USER,\n      payload: {}\n    });\n  };\n\n  const getRepos = async name => {\n    setLoading(); //...\n\n    dispatch({\n      type: GET_REPOS,\n      payload: []\n    });\n  };\n\n  const clearUsers = () => dispatch({\n    type: CLEAR_USERS\n  });\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  const user = state.user,\n        users = state.users,\n        repos = state.repos,\n        loading = state.loading;\n  return React.createElement(GithubContext.Provider, {\n    value: {\n      setLoading,\n      search,\n      getUser,\n      getRepos,\n      clearUsers,\n      user,\n      users,\n      repos,\n      loading\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["C:\\Users\\DEXP\\Desktop\\ReactHooks\\hooks-react\\src\\context\\github\\GithubState.js"],"names":["React","useReducer","CLEAR_USERS","GET_REPOS","GET_USER","SEARCH_USERS","SET_LOADING","GithubContext","githubReducer","console","log","process","env","REACT_APP_CLIENT_SECRET","GithubState","children","initialState","user","users","loading","repos","state","dispatch","search","value","setLoading","type","payload","getUser","name","getRepos","clearUsers"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,EAA2CC,YAA3C,EAAyDC,WAAzD,QAA4E,UAA5E;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAGAC,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,uBAAxB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AACvC,QAAMC,YAAY,GAAG;AACjBC,IAAAA,IAAI,EAAE,EADW;AAEjBC,IAAAA,KAAK,EAAE,EAFU;AAGjBC,IAAAA,OAAO,EAAE,KAHQ;AAIjBC,IAAAA,KAAK,EAAE;AAJU,GAArB;;AADuC,sBAObnB,UAAU,CAACO,aAAD,EAAgBQ,YAAhB,CAPG;AAAA;AAAA,QAOhCK,KAPgC;AAAA,QAOzBC,QAPyB;;AASvC,QAAMC,MAAM,GAAG,MAAMC,KAAN,IAAe;AAC1BC,IAAAA,UAAU,GADgB,CAE1B;;AAEAH,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAErB,YADD;AAELsB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GARD;;AAUA,QAAMC,OAAO,GAAG,MAAMC,IAAN,IAAc;AAC1BJ,IAAAA,UAAU,GADgB,CAE1B;;AAEAH,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEtB,QADD;AAELuB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GARD;;AAUA,QAAMG,QAAQ,GAAG,MAAMD,IAAN,IAAc;AAC3BJ,IAAAA,UAAU,GADiB,CAE3B;;AAEAH,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEvB,SADD;AAELwB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GARD;;AAUA,QAAMI,UAAU,GAAG,MAAMT,QAAQ,CAAC;AAACI,IAAAA,IAAI,EAAExB;AAAP,GAAD,CAAjC;;AAEA,QAAMuB,UAAU,GAAG,MAAMH,QAAQ,CAAC;AAACI,IAAAA,IAAI,EAACpB;AAAN,GAAD,CAAjC;;AAzCuC,QA2ChCW,IA3CgC,GA2CDI,KA3CC,CA2ChCJ,IA3CgC;AAAA,QA2C1BC,KA3C0B,GA2CDG,KA3CC,CA2C1BH,KA3C0B;AAAA,QA2CnBE,KA3CmB,GA2CDC,KA3CC,CA2CnBD,KA3CmB;AAAA,QA2CZD,OA3CY,GA2CDE,KA3CC,CA2CZF,OA3CY;AA6CvC,SACI,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC3BM,MAAAA,UAD2B;AACfF,MAAAA,MADe;AACPK,MAAAA,OADO;AACEE,MAAAA,QADF;AACYC,MAAAA,UADZ;AAE3Bd,MAAAA,IAF2B;AAErBC,MAAAA,KAFqB;AAEdE,MAAAA,KAFc;AAEPD,MAAAA;AAFO,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIKJ,QAJL,CADJ;AAQH,CArDM","sourcesContent":["import React, {useReducer} from 'react'\r\nimport { CLEAR_USERS, GET_REPOS, GET_USER, SEARCH_USERS, SET_LOADING } from '../types'\r\nimport { GithubContext } from './githubContext'\r\nimport { githubReducer } from './githubReducer'\r\n\r\n\r\nconsole.log(process.env.REACT_APP_CLIENT_SECRET);\r\n\r\nexport const GithubState = ({children}) => {\r\n    const initialState = {\r\n        user: {},\r\n        users: [],\r\n        loading: false,\r\n        repos: []\r\n    }\r\n    const [state, dispatch] = useReducer(githubReducer, initialState)\r\n\r\n    const search = async value => {\r\n        setLoading()\r\n        //...\r\n\r\n        dispatch({\r\n            type: SEARCH_USERS,\r\n            payload: []\r\n        })\r\n    }\r\n\r\n    const getUser = async name => {\r\n        setLoading()\r\n        //...\r\n\r\n        dispatch({\r\n            type: GET_USER,\r\n            payload: {}\r\n        })\r\n    }\r\n\r\n    const getRepos = async name => {\r\n        setLoading()\r\n        //...\r\n\r\n        dispatch({\r\n            type: GET_REPOS,\r\n            payload: []\r\n        })\r\n    }\r\n\r\n    const clearUsers = () => dispatch({type: CLEAR_USERS})\r\n\r\n    const setLoading = () => dispatch({type:SET_LOADING})\r\n\r\n    const {user, users, repos, loading} = state\r\n\r\n    return (\r\n        <GithubContext.Provider value={{\r\n            setLoading, search, getUser, getRepos, clearUsers,\r\n            user, users, repos, loading\r\n        }}>\r\n            {children}\r\n        </GithubContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}